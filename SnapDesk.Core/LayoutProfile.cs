using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using LiteDB;

namespace SnapDesk.Core;

/// <summary>
/// Represents a saved desktop layout configuration
/// </summary>
public class LayoutProfile
{
    /// <summary>
    /// Unique identifier for the layout
    /// </summary>
    public ObjectId Id { get; set; }

    /// <summary>
    /// User-friendly name for the layout (e.g., "Coding Setup", "Design Work")
    /// </summary>
    [Required]
    [StringLength(100, MinimumLength = 1)]
    public string Name { get; set; } = string.Empty;

    /// <summary>
    /// Optional description of what this layout is used for
    /// </summary>
    [StringLength(500)]
    public string? Description { get; set; }

    /// <summary>
    /// When this layout was first created
    /// </summary>
    public DateTime CreatedAt { get; set; }

    /// <summary>
    /// When this layout was last modified
    /// </summary>
    public DateTime UpdatedAt { get; set; }

    /// <summary>
    /// Whether this layout is currently active/selected
    /// </summary>
    public bool IsActive { get; set; }

    /// <summary>
    /// List of windows in this layout with their positions and states
    /// </summary>
    public List<WindowInfo> Windows { get; set; } = new();

    /// <summary>
    /// Monitor configuration when this layout was saved
    /// </summary>
    public List<MonitorInfo> MonitorConfiguration { get; set; } = new();

    /// <summary>
    /// Associated hotkey for quick restoration
    /// </summary>
    public HotkeyInfo? Hotkey { get; set; }

    /// <summary>
    /// Constructor that sets default values
    /// </summary>
    public LayoutProfile()
    {
        Id = ObjectId.NewObjectId(); // Generate a new ObjectId
        CreatedAt = DateTime.UtcNow;
        UpdatedAt = DateTime.UtcNow;
    }

    /// <summary>
    /// Constructor with name
    /// </summary>
    /// <param name="name">Name of the layout</param>
    public LayoutProfile(string name) : this()
    {
        Name = name;
        // Id will be auto-generated by LiteDB
    }

    /// <summary>
    /// Constructor with name and description
    /// </summary>
    /// <param name="name">Name of the layout</param>
    /// <param name="description">Description of the layout</param>
    public LayoutProfile(string name, string? description) : this(name)
    {
        Description = description;
    }



    /// <summary>
    /// Adds a window to this layout
    /// </summary>
    /// <param name="window">Window to add</param>
    public void AddWindow(WindowInfo window)
    {
        if (window == null)
            throw new ArgumentNullException(nameof(window));

        // Check if window already exists
        if (Windows.Any(w => w.WindowId == window.WindowId))
            throw new InvalidOperationException($"Window with ID {window.WindowId} already exists in this layout");

        Windows.Add(window);
        UpdatedAt = DateTime.UtcNow;
    }

    /// <summary>
    /// Removes a window from this layout
    /// </summary>
    /// <param name="windowId">ID of the window to remove</param>
    /// <returns>True if window was removed, false if not found</returns>
    public bool RemoveWindow(ObjectId windowId)
    {
        var window = Windows.FirstOrDefault(w => w.WindowId == windowId);
        if (window != null)
        {
            Windows.Remove(window);
            UpdatedAt = DateTime.UtcNow;
            return true;
        }
        return false;
    }

    /// <summary>
    /// Gets a window by its ID
    /// </summary>
    /// <param name="windowId">ID of the window to find</param>
    /// <returns>Window if found, null otherwise</returns>
    public WindowInfo? GetWindow(ObjectId windowId)
    {
        return Windows.FirstOrDefault(w => w.WindowId == windowId);
    }

    /// <summary>
    /// Adds a monitor configuration to this layout
    /// </summary>
    /// <param name="monitor">Monitor to add</param>
    public void AddMonitor(MonitorInfo monitor)
    {
        if (monitor == null)
            throw new ArgumentNullException(nameof(monitor));

        // Check if monitor already exists
        if (MonitorConfiguration.Any(m => m.Index == monitor.Index))
            throw new InvalidOperationException($"Monitor with index {monitor.Index} already exists in this layout");

        MonitorConfiguration.Add(monitor);
        UpdatedAt = DateTime.UtcNow;
    }

    /// <summary>
    /// Gets the primary monitor configuration
    /// </summary>
    /// <returns>Primary monitor if found, null otherwise</returns>
    public MonitorInfo? GetPrimaryMonitor()
    {
        return MonitorConfiguration.FirstOrDefault(m => m.IsPrimary);
    }

    /// <summary>
    /// Sets this layout as active and deactivates others
    /// </summary>
    public void Activate()
    {
        IsActive = true;
        UpdatedAt = DateTime.UtcNow;
    }

    /// <summary>
    /// Deactivates this layout
    /// </summary>
    public void Deactivate()
    {
        IsActive = false;
        UpdatedAt = DateTime.UtcNow;
    }

    /// <summary>
    /// Updates the layout's timestamp
    /// </summary>
    public void UpdateTimestamp()
    {
        UpdatedAt = DateTime.UtcNow;
    }

    /// <summary>
    /// Gets the total number of windows in this layout
    /// </summary>
    public int WindowCount => Windows.Count;

    /// <summary>
    /// Gets the total number of monitors in this layout
    /// </summary>
    public int MonitorCount => MonitorConfiguration.Count;

    /// <summary>
    /// Checks if this layout has any windows
    /// </summary>
    public bool HasWindows => Windows.Count > 0;

    /// <summary>
    /// Checks if this layout has any monitors
    /// </summary>
    public bool HasMonitors => MonitorConfiguration.Count > 0;

    /// <summary>
    /// Gets a summary of this layout
    /// </summary>
    /// <returns>Formatted summary string</returns>
    public string GetSummary()
    {
        return $"Layout '{Name}' with {WindowCount} windows on {MonitorCount} monitors";
    }

    /// <summary>
    /// Validates the layout configuration
    /// </summary>
    /// <returns>True if valid, false otherwise</returns>
    public bool IsValid()
    {
        return !string.IsNullOrWhiteSpace(Name) && 
               Id != ObjectId.Empty && 
               Windows.Count > 0 && 
               MonitorConfiguration.Count > 0;
    }
}
