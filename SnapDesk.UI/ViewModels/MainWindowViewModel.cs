using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Windows.Input;
using System.Linq;
using System.Threading.Tasks;
using CommunityToolkit.Mvvm.ComponentModel;
using SnapDesk.Core;
using SnapDesk.Core.Interfaces;
using Microsoft.Extensions.Logging;

namespace SnapDesk.UI.ViewModels;

/// <summary>
/// Simplified main window view model that demonstrates basic MVVM concepts.
/// This will be enhanced in later phases when we add real services.
/// </summary>
public partial class MainWindowViewModel : ViewModelBase
{
    // Real data from services
    [ObservableProperty]
    private ObservableCollection<LayoutProfile> _layouts = new();
    
    [ObservableProperty]
    private LayoutProfile? _selectedLayout;
    
    [ObservableProperty]
    private bool _isLoading;
    
    [ObservableProperty]
    private string _statusMessage = "Ready";
    
    [ObservableProperty]
    private bool _isDatabaseConnected;
    
    [ObservableProperty]
    private bool _areHotkeysRegistered;
    
    [ObservableProperty]
    private string _databasePath = "Not connected";
    
    [ObservableProperty]
    private int _totalLayouts = 0;
    
    [ObservableProperty]
    private int _totalHotkeys = 0;

    // Properties are automatically generated by [ObservableProperty] attributes
    // No need to manually define getters/setters

    /// <summary>
    /// Command to save the current desktop layout
    /// </summary>
    public ICommand SaveCurrentLayoutCommand { get; }

    /// <summary>
    /// Command to restore a selected layout
    /// </summary>
    public ICommand RestoreLayoutCommand { get; }

    /// <summary>
    /// Command to delete a selected layout
    /// </summary>
    public ICommand DeleteLayoutCommand { get; }

    /// <summary>
    /// Command to refresh the layout list
    /// </summary>
    public ICommand RefreshLayoutsCommand { get; }

    // Service dependencies
    private readonly ILayoutService? _layoutService;
    private readonly IHotkeyService? _hotkeyService;
    private readonly ILogger<MainWindowViewModel>? _logger;

    /// <summary>
    /// Constructor that initializes the view model with real services
    /// </summary>
    public MainWindowViewModel(
        ILayoutService? layoutService = null,
        IHotkeyService? hotkeyService = null,
        ILogger<MainWindowViewModel>? logger = null)
    {
        _layoutService = layoutService;
        _hotkeyService = hotkeyService;
        _logger = logger;

        // Debug output
        Console.WriteLine($"MainWindowViewModel constructor called. Services: Layout={_layoutService != null}, Hotkey={_hotkeyService != null}, Logger={_logger != null}");
        System.Diagnostics.Debug.WriteLine($"MainWindowViewModel constructor called. Services: Layout={_layoutService != null}, Hotkey={_hotkeyService != null}, Logger={_logger != null}");

        // Initialize commands
        SaveCurrentLayoutCommand = new RelayCommand(SaveCurrentLayout);
        RestoreLayoutCommand = new RelayCommand(RestoreSelectedLayout, () => SelectedLayout != null);
        DeleteLayoutCommand = new RelayCommand(DeleteSelectedLayout, () => SelectedLayout != null);
        RefreshLayoutsCommand = new RelayCommand(RefreshLayouts);
        
        // Initialize based on service availability
        if (_layoutService != null && _hotkeyService != null)
        {
            // Real services available - initialize with real data
            Console.WriteLine("Real services available - initializing with real data");
            System.Diagnostics.Debug.WriteLine("Real services available - initializing with real data");
            StatusMessage = "Services available - loading data...";
            IsDatabaseConnected = true;
            DatabasePath = "Connected to database";
            _ = InitializeDataAsync();
        }
        else
        {
            // No services - initialize with sample data for demo mode
            Console.WriteLine($"No services available - initializing with sample data (Demo Mode)");
            Console.WriteLine($"Layout service: {_layoutService?.GetType().Name ?? "NULL"}");
            Console.WriteLine($"Hotkey service: {_hotkeyService?.GetType().Name ?? "NULL"}");
            System.Diagnostics.Debug.WriteLine($"No services available - initializing with sample data (Demo Mode)");
            System.Diagnostics.Debug.WriteLine($"Layout service: {_layoutService?.GetType().Name ?? "NULL"}");
            System.Diagnostics.Debug.WriteLine($"Hotkey service: {_hotkeyService?.GetType().Name ?? "NULL"}");
            
            // Show detailed service status in the UI for debugging
            var layoutServiceType = _layoutService?.GetType().Name ?? "NULL";
            var hotkeyServiceType = _hotkeyService?.GetType().Name ?? "NULL";
            StatusMessage = $"Demo Mode - Layout: {layoutServiceType}, Hotkey: {hotkeyServiceType}";
            
            InitializeWithSampleData();
        }
    }
    
    /// <summary>
    /// Initialize with sample data for immediate UI display
    /// </summary>
    private void InitializeWithSampleData()
    {
        // Set initial state
        IsLoading = false;
        StatusMessage = "Demo Mode - No services available";
        IsDatabaseConnected = false;
        AreHotkeysRegistered = false;
        DatabasePath = "Demo Mode";
        TotalLayouts = 0;
        TotalHotkeys = 0;
        
        // Add some sample layouts for testing
        Layouts.Add(new LayoutProfile { Name = "Sample Layout 1", Description = "This is a sample layout for testing (Demo Mode)", CreatedAt = DateTime.Now.AddDays(-1) });
        Layouts.Add(new LayoutProfile { Name = "Sample Layout 2", Description = "Another sample layout (Demo Mode)", CreatedAt = DateTime.Now.AddDays(-2) });
        TotalLayouts = Layouts.Count;
    }

    /// <summary>
    /// Initializes data from services
    /// </summary>
    private async Task InitializeDataAsync()
    {
        try
        {
            Console.WriteLine("InitializeDataAsync called - starting to load data from services");
            System.Diagnostics.Debug.WriteLine("InitializeDataAsync called - starting to load data from services");
            
            IsLoading = true;
            StatusMessage = "Loading layouts from database...";
            
            // Load layouts from service
            Console.WriteLine("Loading layouts from service...");
            var layouts = await _layoutService.GetAllLayoutsAsync();
            Console.WriteLine($"Retrieved {layouts.Count()} layouts from service");
            
            Layouts.Clear();
            foreach (var layout in layouts)
            {
                Layouts.Add(layout);
            }
            TotalLayouts = Layouts.Count;
            
            // Load hotkeys from service
            Console.WriteLine("Loading hotkeys from service...");
            var hotkeys = await _hotkeyService.GetRegisteredHotkeysAsync();
            TotalHotkeys = hotkeys.Count();
            
            // Check database connection status
            IsDatabaseConnected = true;
            DatabasePath = "Connected to database";
            
            // Check hotkey registration status
            AreHotkeysRegistered = TotalHotkeys > 0;
            
            StatusMessage = $"Ready - {TotalLayouts} layouts, {TotalHotkeys} hotkeys";
            Console.WriteLine($"Data initialization completed: {TotalLayouts} layouts, {TotalHotkeys} hotkeys");
            _logger?.LogInformation("Data initialized: {LayoutCount} layouts, {HotkeyCount} hotkeys", TotalLayouts, TotalHotkeys);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in InitializeDataAsync: {ex.Message}");
            System.Diagnostics.Debug.WriteLine($"Error in InitializeDataAsync: {ex.Message}");
            
            StatusMessage = $"Failed to load data: {ex.Message}";
            _logger?.LogError(ex, "Failed to initialize data from services");
            
            // Fall back to sample data if service fails
            InitializeWithSampleData();
            StatusMessage = $"Service unavailable - using demo mode. Error: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    /// <summary>
    /// Saves the current desktop layout using real service
    /// </summary>
    private async void SaveCurrentLayout()
    {
        try
        {
            IsLoading = true;
            StatusMessage = "Capturing current layout...";

            // Generate a default name
            var layoutName = $"Layout {DateTime.Now:yyyy-MM-dd HH:mm}";
            
            if (_layoutService != null)
            {
                // Use real service to save layout
                var newLayout = await _layoutService.SaveCurrentLayoutAsync(layoutName);
                
                // Add to collection
                Layouts.Add(newLayout);
                TotalLayouts = Layouts.Count;
                
                // Update status
                StatusMessage = $"Layout '{newLayout.Name}' saved successfully";
                _logger?.LogInformation("Layout saved: {LayoutName} with ID {LayoutId}", newLayout.Name, newLayout.Id);
            }
            else
            {
                // Create sample layout for demo
                var sampleLayout = new LayoutProfile 
                { 
                    Name = layoutName, 
                    Description = "Sample layout created in demo mode", 
                    CreatedAt = DateTime.Now 
                };
                Layouts.Add(sampleLayout);
                TotalLayouts = Layouts.Count;
                StatusMessage = $"Sample layout '{layoutName}' created successfully!";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Failed to save layout: {ex.Message}";
            _logger.LogError(ex, "Failed to save current layout");
        }
        finally
        {
            IsLoading = false;
        }
    }

    /// <summary>
    /// Restores the selected layout using real service
    /// </summary>
    private async void RestoreSelectedLayout()
    {
        if (SelectedLayout == null) return;

        try
        {
            IsLoading = true;
            StatusMessage = $"Restoring layout '{SelectedLayout.Name}'...";

            if (_layoutService != null)
            {
                // Use real service to restore layout
                var success = await _layoutService.RestoreLayoutAsync(SelectedLayout.Id);
                
                if (success)
                {
                    StatusMessage = $"Layout '{SelectedLayout.Name}' restored successfully";
                    _logger?.LogInformation("Layout restored: {LayoutName} with ID {LayoutId}", SelectedLayout.Name, SelectedLayout.Id);
                }
                else
                {
                    var layoutName = SelectedLayout?.Name ?? "Unknown";
                    var layoutId = SelectedLayout?.Id.ToString() ?? "Unknown";
                    StatusMessage = $"Failed to restore layout '{layoutName}'";
                    _logger?.LogWarning("Layout restoration failed: {LayoutName} with ID {LayoutId}", layoutName, layoutId);
                }
            }
            else
            {
                // Demo mode - simulate restoration
                StatusMessage = $"Layout '{SelectedLayout.Name}' restored successfully (Demo Mode)";
            }
        }
        catch (Exception ex)
        {
            var layoutName = SelectedLayout?.Name ?? "Unknown";
            var layoutId = SelectedLayout?.Id.ToString() ?? "Unknown";
            StatusMessage = $"Failed to restore layout: {ex.Message}";
            _logger.LogError(ex, "Failed to restore layout {LayoutName} with ID {LayoutId}", layoutName, layoutId);
        }
        finally
        {
            IsLoading = false;
        }
    }

    /// <summary>
    /// Deletes the selected layout using real service
    /// </summary>
    private async void DeleteSelectedLayout()
    {
        if (SelectedLayout == null) return;

        try
        {
            IsLoading = true;
            StatusMessage = $"Deleting layout '{SelectedLayout.Name}'...";

            if (_layoutService != null)
            {
                // Use real service to delete layout
                var success = await _layoutService.DeleteLayoutAsync(SelectedLayout.Id);
                
                if (success)
                {
                    // Store the layout info before removing it
                    var deletedLayoutName = SelectedLayout.Name;
                    var deletedLayoutId = SelectedLayout.Id;
                    
                    // Remove from collection
                    Layouts.Remove(SelectedLayout);
                    SelectedLayout = null;
                    TotalLayouts = Layouts.Count;
                    
                    StatusMessage = "Layout deleted successfully";
                    _logger?.LogInformation("Layout deleted: {LayoutName} with ID {LayoutId}", deletedLayoutName, deletedLayoutId);
                }
                else
                {
                    var layoutName = SelectedLayout.Name;
                    var layoutId = SelectedLayout.Id;
                    StatusMessage = $"Failed to delete layout '{layoutName}'";
                    _logger?.LogWarning("Layout deletion failed: {LayoutName} with ID {LayoutId}", layoutName, layoutId);
                }
            }
            else
            {
                // Demo mode - simulate deletion
                var deletedLayoutName = SelectedLayout.Name;
                
                // Remove from collection
                Layouts.Remove(SelectedLayout);
                SelectedLayout = null;
                TotalLayouts = Layouts.Count;
                
                StatusMessage = $"Layout '{deletedLayoutName}' deleted successfully (Demo Mode)";
            }
        }
        catch (Exception ex)
        {
            var layoutName = SelectedLayout?.Name ?? "Unknown";
            var layoutId = SelectedLayout?.Id.ToString() ?? "Unknown";
            StatusMessage = $"Failed to delete layout: {ex.Message}";
            _logger.LogError(ex, "Failed to delete layout {LayoutName} with ID {LayoutId}", layoutName, layoutId);
        }
        finally
        {
            IsLoading = false;
        }
    }

    /// <summary>
    /// Refreshes the layout list using real service
    /// </summary>
    private async void RefreshLayouts()
    {
        try
        {
            IsLoading = true;
            StatusMessage = "Refreshing layouts...";

            if (_layoutService != null)
            {
                // Use real service to refresh layouts
                var layouts = await _layoutService.GetAllLayoutsAsync();
                Layouts.Clear();
                foreach (var layout in layouts)
                {
                    Layouts.Add(layout);
                }
                TotalLayouts = Layouts.Count;
                
                StatusMessage = $"Refreshed {TotalLayouts} layouts";
                _logger?.LogInformation("Layouts refreshed: {LayoutCount} layouts", TotalLayouts);
            }
            else
            {
                // Demo mode - refresh sample data
                Layouts.Clear();
                Layouts.Add(new LayoutProfile { Name = "Sample Layout 1", Description = "This is a sample layout for testing", CreatedAt = DateTime.Now.AddDays(-1) });
                Layouts.Add(new LayoutProfile { Name = "Sample Layout 2", Description = "Another sample layout", CreatedAt = DateTime.Now.AddDays(-2) });
                TotalLayouts = Layouts.Count;
                
                StatusMessage = $"Refreshed {TotalLayouts} sample layouts (Demo Mode)";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Failed to refresh layouts: {ex.Message}";
            _logger.LogError(ex, "Failed to refresh layouts");
        }
        finally
        {
            IsLoading = false;
        }
    }
}
